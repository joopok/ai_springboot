<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.fid.job.mapper.ProjectMapper">

    <!-- Project ResultMap -->
    <resultMap id="ProjectResultMap" type="com.fid.job.model.Project">
        <id property="id" column="id"/>
        <result property="companyId" column="company_id"/>
        <result property="clientId" column="client_id"/>
        <result property="categoryId" column="category_id"/>
        <result property="category" column="category"/>
        <result property="title" column="title"/>
        <result property="description" column="description"/>
        <result property="projectType" column="project_type"/>
        <result property="budgetType" column="budget_type"/>
        <result property="workType" column="work_type"/>
        <result property="location" column="location"/>
        <result property="budgetMin" column="budget_min"/>
        <result property="budgetMax" column="budget_max"/>
        <result property="duration" column="duration"/>
        <result property="startDate" column="start_date"/>
        <result property="deadline" column="deadline"/>
        <result property="requiredSkills" column="required_skills"/>
        <result property="preferredSkills" column="preferred_skills"/>
        <result property="experienceYears" column="experience_years"/>
        <result property="experienceLevel" column="experience_level"/>
        <result property="status" column="status"/>
        <result property="views" column="views"/>
        <result property="applications" column="applications"/>
        <result property="applicationsCount" column="applications_count"/>
        <result property="isFeatured" column="is_featured"/>
        <result property="isUrgent" column="is_urgent"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <!-- Join된 정보 -->
        <result property="companyName" column="company_name"/>
        <result property="companyLogo" column="company_logo"/>
        <result property="clientName" column="client_name"/>
        <result property="categoryName" column="category_name"/>
        <!-- 추가 정보 -->
        <result property="isBookmarked" column="is_bookmarked"/>
        <result property="hasApplied" column="has_applied"/>
        <result property="bookmarkCount" column="bookmark_count"/>
        <!-- 원격/상주 프로젝트 관련 필드 -->
        <result property="remoteTools" column="remote_tools"/>
        <result property="communicationMethods" column="communication_methods"/>
        <result property="teamSize" column="team_size"/>
        <result property="developmentMethodology" column="development_methodology"/>
        <result property="codeReviewProcess" column="code_review_process"/>
        <result property="workingHours" column="working_hours"/>
        <result property="flexibleHours" column="flexible_hours"/>
        <result property="timezone" column="timezone"/>
        <result property="onsiteRequirements" column="onsite_requirements"/>
        <result property="onsiteFrequency" column="onsite_frequency"/>
        <result property="officeLocation" column="office_location"/>
        <result property="parkingAvailable" column="parking_available"/>
        <result property="mealProvided" column="meal_provided"/>
        <result property="equipmentProvided" column="equipment_provided"/>
        <result property="benefits" column="benefits"/>
        <result property="preferredWorkingHours" column="preferred_working_hours"/>
        <result property="deliverables" column="deliverables"/>
        <result property="projectStages" column="project_stages"/>
        <result property="urgency" column="urgency"/>
        <result property="negotiable" column="negotiable"/>
        <result property="viewCount" column="views"/>
        <result property="budget" column="budget"/>
        <result property="requirements" column="requirements"/>
    </resultMap>

    <!-- 기본 컬럼 (최적화된 선택적 조인) -->
    <sql id="BaseColumns">
        p.id,
        p.company_id,
        p.client_id,
        p.category_id,
        p.category,
        p.title,
        p.description,
        p.project_type,
        p.budget_type,
        p.work_type,
        p.location,
        p.budget_min,
        p.budget_max,
        p.duration,
        p.start_date,
        p.deadline,
        p.required_skills,
        p.preferred_skills,
        p.experience_years,
        p.experience_level,
        p.status,
        p.views,
        p.applications,
        p.applications_count,
        p.is_featured,
        p.is_urgent,
        p.created_at,
        p.updated_at,
        p.remote_tools,
        p.communication_methods,
        p.team_size,
        p.development_methodology,
        p.code_review_process,
        p.working_hours,
        p.flexible_hours,
        p.timezone,
        p.onsite_requirements,
        p.onsite_frequency,
        p.office_location,
        p.parking_available,
        p.meal_provided,
        p.equipment_provided,
        p.benefits,
        p.preferred_working_hours,
        p.deliverables,
        p.project_stages,
        p.urgency,
        p.negotiable,
        CONCAT(p.budget_min, '~', p.budget_max) as budget,
        p.requirements
    </sql>

    <!-- 조인 컬럼 (필요시만 조인) -->
    <sql id="JoinColumns">
        <if test="params == null or params.includeCompany == null or params.includeCompany == true">
            ,c.company_name,
            c.logo_url as company_logo
        </if>
        <if test="params == null or params.includeClient == null or params.includeClient == true">
            ,u.name as client_name
        </if>
        <if test="params == null or params.includeCategory == null or params.includeCategory == true">
            ,cat.name as category_name
        </if>
    </sql>

    <!-- 사용자별 정보 (북마크, 지원 여부) -->
    <sql id="UserSpecificColumns">
        <if test="params != null and params.userId != null">
            ,(SELECT COUNT(*) FROM project_bookmarks pb WHERE pb.project_id = p.id AND pb.user_id = #{params.userId}) as is_bookmarked
            ,(SELECT COUNT(*) FROM project_applications pa WHERE pa.project_id = p.id AND pa.user_id = #{params.userId}) as has_applied
        </if>
        ,(SELECT COUNT(*) FROM project_bookmarks pb WHERE pb.project_id = p.id) as bookmark_count
    </sql>

    <!-- 기본 조인 (최적화) -->
    <sql id="BaseJoins">
        FROM projects p
        <if test="params == null or params.includeCompany == null or params.includeCompany == true">
            LEFT JOIN companies c ON p.company_id = c.id
        </if>
        <if test="params == null or params.includeClient == null or params.includeClient == true">
            LEFT JOIN users u ON p.client_id = u.id
        </if>
        <if test="params == null or params.includeCategory == null or params.includeCategory == true">
            LEFT JOIN categories cat ON p.category_id = cat.id
        </if>
        WHERE p.status = 'active'
    </sql>

    <!-- 검색 조건 -->
    <sql id="SearchConditions">
        <if test="params != null">
            <!-- 키워드 검색 -->
            <if test="params.search != null and params.search != ''">
                AND (
                    p.title LIKE CONCAT('%', #{params.search}, '%')
                    OR p.description LIKE CONCAT('%', #{params.search}, '%')
                    <if test="params.includeCompany == null or params.includeCompany == true">
                        OR c.company_name LIKE CONCAT('%', #{params.search}, '%')
                    </if>
                    OR JSON_SEARCH(p.required_skills, 'one', CONCAT('%', #{params.search}, '%')) IS NOT NULL
                )
            </if>
            
            <!-- 프로젝트 타입 -->
            <if test="params.projectType != null and params.projectType != ''">
                AND p.project_type = #{params.projectType}
            </if>
            
            <!-- 근무 형태 -->
            <if test="params.workType != null and params.workType != ''">
                AND p.work_type = #{params.workType}
            </if>
            
            <!-- 위치 -->
            <if test="params.location != null and params.location != ''">
                AND p.location LIKE CONCAT('%', #{params.location}, '%')
            </if>
            
            <!-- 예산 범위 -->
            <if test="params.minBudget != null">
                AND p.budget_max >= #{params.minBudget}
            </if>
            
            <if test="params.maxBudget != null">
                AND p.budget_min &lt;= #{params.maxBudget}
            </if>
            
            <!-- 경력 수준 -->
            <if test="params.experienceLevel != null and params.experienceLevel != ''">
                AND p.experience_level = #{params.experienceLevel}
            </if>
            
            <!-- 기술 스택 필터 -->
            <if test="params.skills != null and params.skills.size() > 0">
                AND (
                    <foreach collection="params.skills" item="skill" separator=" OR ">
                        JSON_SEARCH(p.required_skills, 'one', #{skill}) IS NOT NULL
                        OR JSON_SEARCH(p.preferred_skills, 'one', #{skill}) IS NOT NULL
                    </foreach>
                )
            </if>
            
            <!-- 카테고리 -->
            <if test="params.categoryId != null">
                AND p.category_id = #{params.categoryId}
            </if>
            
            <!-- 긴급 여부 -->
            <if test="params.urgentOnly != null and params.urgentOnly == true">
                AND p.is_urgent = true
            </if>
            
            <!-- 추천 여부 -->
            <if test="params.featuredOnly != null and params.featuredOnly == true">
                AND p.is_featured = true
            </if>
            
            <!-- 마감일 필터 -->
            <if test="params.deadlineWithin != null">
                AND p.deadline >= CURDATE() 
                AND p.deadline &lt;= DATE_ADD(CURDATE(), INTERVAL #{params.deadlineWithin} DAY)
            </if>
            
            <!-- 상주 프로젝트 관련 필터 -->
            <!-- 팀 규모 -->
            <if test="params.teamSize != null and params.teamSize != ''">
                AND p.team_size = #{params.teamSize}
            </if>
            
            <!-- 상주 빈도 -->
            <if test="params.onsiteFrequency != null and params.onsiteFrequency != ''">
                AND p.onsite_frequency = #{params.onsiteFrequency}
            </if>
            
            <!-- 유연근무제 -->
            <if test="params.flexibleHours != null">
                AND p.flexible_hours = #{params.flexibleHours}
            </if>
            
            <!-- 긴급도 -->
            <if test="params.urgency != null and params.urgency != ''">
                AND p.urgency = #{params.urgency}
            </if>
            
            <!-- 원격 도구 -->
            <if test="params.remoteTools != null and params.remoteTools.size() > 0">
                AND (
                    <foreach collection="params.remoteTools" item="tool" separator=" OR ">
                        JSON_SEARCH(p.remote_tools, 'one', #{tool}) IS NOT NULL
                    </foreach>
                )
            </if>
        </if>
    </sql>

    <!-- 정렬 조건 -->
    <sql id="OrderByClause">
        ORDER BY
        <choose>
            <when test="params != null and params.sortBy == 'latest'">
                p.created_at DESC
            </when>
            <when test="params != null and params.sortBy == 'deadline'">
                p.deadline ASC
            </when>
            <when test="params != null and params.sortBy == 'budget'">
                p.budget_max DESC
            </when>
            <when test="params != null and params.sortBy == 'views'">
                p.views DESC
            </when>
            <when test="params != null and params.sortBy == 'applications'">
                p.applications DESC
            </when>
            <otherwise>
                p.is_urgent DESC, p.is_featured DESC, p.created_at DESC
            </otherwise>
        </choose>
    </sql>

    <!-- 전체 프로젝트 목록 조회 -->
    <select id="findAll" parameterType="map" resultMap="ProjectResultMap">
        SELECT 
        <include refid="BaseColumns"/>
        <include refid="JoinColumns"/>
        <include refid="UserSpecificColumns"/>
        <include refid="BaseJoins"/>
        <include refid="SearchConditions"/>
        <include refid="OrderByClause"/>
        
        <if test="params != null and params.limit != null and params.offset != null">
            LIMIT #{params.limit} OFFSET #{params.offset}
        </if>
    </select>

    <!-- 전체 프로젝트 수 조회 -->
    <select id="countAll" parameterType="map" resultType="int">
        SELECT COUNT(DISTINCT p.id)
        <include refid="BaseJoins"/>
        <include refid="SearchConditions"/>
    </select>

    <!-- 특정 프로젝트 상세 조회 -->
    <select id="findById" parameterType="long" resultMap="ProjectResultMap">
        SELECT 
        <include refid="BaseColumns"/>
        ,c.company_name
        ,c.logo_url as company_logo
        ,c.description as company_description
        ,c.industry as company_industry
        ,c.employee_count as company_employee_count
        ,u.name as client_name
        ,cat.name as category_name
        <if test="userId != null">
            ,(SELECT COUNT(*) FROM project_bookmarks pb WHERE pb.project_id = p.id AND pb.user_id = #{userId}) as is_bookmarked
            ,(SELECT COUNT(*) FROM project_applications pa WHERE pa.project_id = p.id AND pa.user_id = #{userId}) as has_applied
        </if>
        ,(SELECT COUNT(*) FROM project_bookmarks pb WHERE pb.project_id = p.id) as bookmark_count
        FROM projects p
        LEFT JOIN companies c ON p.company_id = c.id
        LEFT JOIN users u ON p.client_id = u.id
        LEFT JOIN categories cat ON p.category_id = cat.id
        WHERE p.id = #{id}
    </select>

    <!-- 조회수 증가 -->
    <update id="incrementViewCount" parameterType="long">
        UPDATE projects 
        SET views = views + 1,
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 프로젝트 지원 -->
    <insert id="insertApplication">
        INSERT INTO project_applications (
            project_id, 
            user_id, 
            cover_letter,
            proposed_budget,
            status,
            applied_at,
            created_at
        ) VALUES (
            #{projectId}, 
            #{userId}, 
            #{coverLetter},
            #{proposedBudget},
            'pending',
            NOW(),
            NOW()
        )
        ON DUPLICATE KEY UPDATE
            cover_letter = VALUES(cover_letter),
            proposed_budget = VALUES(proposed_budget),
            updated_at = NOW()
    </insert>

    <!-- 지원 여부 확인 -->
    <select id="hasApplied" resultType="boolean">
        SELECT EXISTS (
            SELECT 1 FROM project_applications 
            WHERE project_id = #{projectId} AND user_id = #{userId}
        )
    </select>

    <!-- 북마크 추가 -->
    <insert id="insertBookmark">
        INSERT INTO project_bookmarks (project_id, user_id, created_at)
        VALUES (#{projectId}, #{userId}, NOW())
        ON DUPLICATE KEY UPDATE created_at = NOW()
    </insert>

    <!-- 북마크 삭제 -->
    <delete id="deleteBookmark">
        DELETE FROM project_bookmarks 
        WHERE project_id = #{projectId} AND user_id = #{userId}
    </delete>

    <!-- 북마크 여부 확인 -->
    <select id="isBookmarked" resultType="boolean">
        SELECT EXISTS (
            SELECT 1 FROM project_bookmarks 
            WHERE project_id = #{projectId} AND user_id = #{userId}
        )
    </select>

    <!-- 북마크 수 조회 -->
    <select id="countBookmarks" resultType="int">
        SELECT COUNT(*) FROM project_bookmarks 
        WHERE project_id = #{projectId}
    </select>

    <!-- 관련 프로젝트 조회 (같은 카테고리, 유사 기술) -->
    <select id="findRelatedProjects" resultMap="ProjectResultMap">
        SELECT 
        <include refid="BaseColumns"/>
        ,c.company_name
        ,c.logo_url as company_logo
        FROM projects p
        LEFT JOIN companies c ON p.company_id = c.id
        WHERE p.status = 'active' 
        AND p.id != #{projectId}
        AND (
            p.category_id = (SELECT category_id FROM projects WHERE id = #{projectId})
            OR EXISTS (
                SELECT 1 FROM projects p2
                WHERE p2.id = #{projectId}
                AND (
                    JSON_OVERLAPS(p.required_skills, p2.required_skills)
                    OR JSON_OVERLAPS(p.preferred_skills, p2.required_skills)
                )
            )
        )
        ORDER BY p.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 인기 프로젝트 조회 -->
    <select id="findPopularProjects" resultMap="ProjectResultMap">
        SELECT 
        <include refid="BaseColumns"/>
        ,c.company_name
        ,c.logo_url as company_logo
        FROM projects p
        LEFT JOIN companies c ON p.company_id = c.id
        WHERE p.status = 'active'
        AND p.created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
        ORDER BY (p.views * 0.3 + p.applications * 0.7) DESC
        LIMIT #{limit}
    </select>

    <!-- 긴급 프로젝트 조회 -->
    <select id="findUrgentProjects" resultMap="ProjectResultMap">
        SELECT 
        <include refid="BaseColumns"/>
        ,c.company_name
        ,c.logo_url as company_logo
        FROM projects p
        LEFT JOIN companies c ON p.company_id = c.id
        WHERE p.status = 'active'
        AND p.is_urgent = true
        AND p.deadline >= CURDATE()
        ORDER BY p.deadline ASC, p.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 북마크한 프로젝트 목록 -->
    <select id="findBookmarkedProjects" resultMap="ProjectResultMap">
        SELECT 
        <include refid="BaseColumns"/>
        ,c.company_name
        ,c.logo_url as company_logo
        ,pb.created_at as bookmarked_at
        FROM projects p
        INNER JOIN project_bookmarks pb ON p.id = pb.project_id
        LEFT JOIN companies c ON p.company_id = c.id
        WHERE pb.user_id = #{userId}
        AND p.status = 'active'
        ORDER BY pb.created_at DESC
        
        <if test="params != null and params.limit != null and params.offset != null">
            LIMIT #{params.limit} OFFSET #{params.offset}
        </if>
    </select>

    <!-- 프로젝트 질문 목록 조회 -->
    <select id="findProjectQuestions" parameterType="map" resultType="map">
        SELECT 
            q.id,
            q.project_id AS projectId,
            q.user_id AS userId,
            q.content,
            q.answer,
            q.answered_by AS answeredBy,
            q.answered_at AS answeredAt,
            q.created_at AS createdAt,
            u.name AS authorName,
            u.profile_image AS authorProfileImage,
            au.name AS answererName
        FROM project_questions q
        LEFT JOIN users u ON q.user_id = u.id
        LEFT JOIN users au ON q.answered_by = au.id
        WHERE q.project_id = #{params.projectId}
        ORDER BY q.created_at DESC
        LIMIT #{params.limit} OFFSET #{params.offset}
    </select>
    
    <!-- 프로젝트 질문 수 조회 -->
    <select id="countProjectQuestions" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM project_questions
        WHERE project_id = #{params.projectId}
    </select>
    
    <!-- 프로젝트 질문 등록 -->
    <insert id="insertProjectQuestion" parameterType="map">
        INSERT INTO project_questions (project_id, user_id, content)
        VALUES (#{params.projectId}, #{params.userId}, #{params.content})
    </insert>
    
    <!-- 프로젝트 후기 목록 조회 -->
    <select id="findProjectReviews" parameterType="map" resultType="map">
        SELECT 
            r.id,
            r.project_id AS projectId,
            r.user_id AS userId,
            r.rating,
            r.content,
            r.project_duration AS projectDuration,
            r.project_budget AS projectBudget,
            r.created_at AS createdAt,
            u.name AS authorName,
            u.profile_image AS authorProfileImage,
            u.name AS freelancerName
        FROM project_reviews r
        LEFT JOIN users u ON r.user_id = u.id
        WHERE r.project_id = #{params.projectId}
        ORDER BY r.created_at DESC
        LIMIT #{params.limit} OFFSET #{params.offset}
    </select>
    
    <!-- 프로젝트 후기 수 조회 -->
    <select id="countProjectReviews" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM project_reviews
        WHERE project_id = #{params.projectId}
    </select>
    
    <!-- 프로젝트 후기 등록 -->
    <insert id="insertProjectReview" parameterType="map">
        INSERT INTO project_reviews (project_id, user_id, rating, content)
        VALUES (#{params.projectId}, #{params.userId}, #{params.rating}, #{params.content})
    </insert>

</mapper>