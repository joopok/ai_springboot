#!/bin/bash

# Jenkins 최종 배포 스크립트 (빌드부터 원격 배포까지)
set -e # 에러 발생 시 즉시 중단

echo "=== Jenkins 최종 배포 스크립트 시작 ==="
echo "빌드 번호: $BUILD_NUMBER"
echo "작업 공간: $WORKSPACE"
echo "배포 시간: $(date)"

# --- 1. Gradle 빌드 (Java 8 강제) ---
echo " "
echo "--- 1. Gradle 빌드 (Java 8 강제) ---"

# Jenkins에 의해 설정된 JAVA_HOME을 확인합니다.
echo "Jenkins가 설정한 JAVA_HOME: $JAVA_HOME"
echo "해당 경로의 Java 버전을 확인합니다:"
$JAVA_HOME/bin/java -version

# gradlew 실행 권한 부여
chmod +x ./gradlew

# 기존 Gradle 데몬을 중지하여 Java 버전 충돌을 방지합니다.
echo "기존 Gradle 데몬을 중지합니다..."
./gradlew --stop || true

# Gradle 빌드 (데몬 비활성화 및 Jenkins의 JAVA_HOME 사용)
echo "Gradle 빌드를 시작합니다 (데몬 비활성화)..."
./gradlew clean build -x test --no-daemon

# 빌드된 JAR 파일 경로 확인
JAR_PATH=$(find build/libs/ -name "*.jar" | head -n 1)

if [ -z "$JAR_PATH" ]; then
    echo "오류: 빌드된 JAR 파일을 찾을 수 없습니다."
    exit 1
fi

echo "빌드 성공: $JAR_PATH"


# --- 2. 원격 서버에 배포 파일 전송 ---
echo " "
echo "--- 2. 원격 서버에 배포 파일 전송 ---"

# 원격 서버 정보 (Jenkins 자격증명 사용 권장)
REMOTE_USER="joopok"
REMOTE_HOST="192.168.0.109"
REMOTE_DEPLOY_DIR="/volume1/homes/joopok/java/job_finder"

# 원격 서버에 배포 디렉토리 생성
ssh ${REMOTE_USER}@${REMOTE_HOST} "mkdir -p ${REMOTE_DEPLOY_DIR}"

# JAR 파일과 Dockerfile을 원격 서버에 복사
scp "$JAR_PATH" "${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DEPLOY_DIR}/app.jar"
scp Dockerfile "${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DEPLOY_DIR}/Dockerfile"

echo "파일 전송 완료:"
ssh ${REMOTE_USER}@${REMOTE_HOST} "ls -l ${REMOTE_DEPLOY_DIR}"


# --- 3. 원격 서버에서 Docker 컨테이너 배포 ---
echo " "
echo "--- 3. 원격 서버에서 Docker 컨테이너 배포 ---"

# 원격 서버에서 실행할 배포 스크립트
# Docker 이미지 빌드, 기존 컨테이너 중지/삭제, 새 컨테이너 실행
ssh ${REMOTE_USER}@${REMOTE_HOST} << EOF
set -e

cd ${REMOTE_DEPLOY_DIR}

CONTAINER_NAME="job-platform-container"
IMAGE_NAME="job-platform:latest"

echo "기존 Docker 컨테이너를 중지하고 삭제합니다..."
docker stop \
${CONTAINER_NAME} 2>/dev/null || true
docker rm \
${CONTAINER_NAME} 2>/dev/null || true

echo "새로운 Docker 이미지를 빌드합니다..."
docker build -t \
${IMAGE_NAME} .

echo "새로운 Docker 컨테이너를 시작합니다..."
docker run -d \
    --name \
${CONTAINER_NAME} \
    --restart unless-stopped \
    -p 9090:9090 \
    -e SPRING_PROFILES_ACTIVE=prod \
    -e TZ=Asia/Seoul \
    \
${IMAGE_NAME}

echo "배포가 진행 중입니다. 10초 후 상태를 확인합니다..."
sleep 10

# 배포 확인
if docker ps --filter "name=\"${CONTAINER_NAME}\"" --filter "status=running" -q | grep -q .; then
    echo "✅ 배포 성공!"
    echo "컨테이너 상태:"
    docker ps --filter "name=\"${CONTAINER_NAME}\""
else
    echo "❌ 배포 실패!"
    echo "컨테이너 로그:"
    docker logs \
${CONTAINER_NAME}
fi
EOF

echo " "
echo "🎉 Jenkins 배포 작업이 성공적으로 완료되었습니다!"
